<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta http-equiv="X-UA-Compatible" content="ie=edge" />
		<title>Identicon Generator</title>
		<style>
			#resultDownloadLink {
				display: none;
			}
			#resultDownloadLink[href] {
				display: unset;
			}
		</style>
	</head>
	<body>
		<form>
			<label
				><span>Type your name here:</span
				><input
					type="text"
					name="sourceString"
					placeholder="Joe Schmoe"
					required
					minlength="1"
					autofocus
			/></label>
			<button type="submit">Generate My Identicon!</button>
		</form>
		<a id="resultDownloadLink"
			><img id="resultImg" />
			<br />
			<span>Download Your Identicon!</span>
		</a>
		<script
			type="text/javascript"
			src="node_modules/murmurhash/murmurhash.js"></script>
		<script
			type="text/javascript"
			src="node_modules/tinycolor2/dist/tinycolor-min.js"></script>
		<script type="text/javascript">
			const maxUint32 = 4294967295;

			function getPropsFromHash(sourceString) {
				const hashUint32 = murmur(sourceString);

				const useCapital = hashUint32 > maxUint32 / 2; //	higher hash = capital letters

				const useSerif = !!(hashUint32 % 2); //	odd hash value = serif

				const colourRGBHexValue = Math.round(
					(hashUint32 / maxUint32) * 0xffffff
				); // just pick a colour along the number line of possible hex values

				const tcForeground = new tinycolor(
					colourRGBHexValue.toString(16).padStart(6, "0")
				);
				const tcBackground = tcForeground.clone().complement();

				//	brighten / darken until colours pass accessibility threshold
				//	https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html
				while (
					tinycolor.isReadable(tcForeground, tcBackground, {
						level: "AAA",
						size: "large",
					}) === false
				) {
					if (tcForeground.isLight()) {
						tcForeground.lighten();
						tcBackground.darken();
					} else {
						tcForeground.darken();
						tcBackground.lighten();
					}
				}

				const foregroundColour = tcForeground.toHex();
				const backgroundColour = tcBackground.toHex();

				return {
					useCapital,
					useSerif,
					foregroundColour,
					backgroundColour,
				};
			}

			function generateIdenticon(sourceString, defaultChar = "x") {
				const props = getPropsFromHash(sourceString);

				ctx.fillStyle = `#${props.backgroundColour}`;
				ctx.fillRect(0, 0, canvas.width, canvas.height);

				let primeChar =
					sourceString.match(/[a-zA-Z]/)?.[0] ?? //	first letter
					sourceString.match(/[0-9]/)?.[0] ?? //	first number
					defaultChar; //	or just default
				primeChar = props.useCaps ? primeChar.toUpperCase() : primeChar;

				ctx.font = `100px ${props.useSerif ? "serif" : "sans-serif"}`;
				//	TODO: ooooooh what if gradient??
				ctx.fillStyle = `#${props.foregroundColour}`;

				ctx.fillText(primeChar, canvas.width / 2, canvas.height / 2);

				const resultDataURL = canvas.toDataURL("image/png");
				resultImg.src = resultDataURL;
				resultDownloadLink.href = resultDataURL;
				resultDownloadLink.download = `${primeChar}_${sourceString}`;
			}

			const searchParams = new URLSearchParams(window.location.search);
			const sourceString = searchParams.get("sourceString");
			const canvas = document.createElement("canvas");
			canvas.width = 128;
			canvas.height = 128;
			const ctx = canvas.getContext("2d");
			ctx.textAlign = "center";
			ctx.textBaseline = "middle";

			const resultDownloadLink = document.querySelector("#resultDownloadLink");
			const resultImg = document.querySelector("#resultImg");

			if (sourceString) {
				//	default the input field to the previously submitted text for continuity's sake
				document.querySelector("[name=sourceString]").value = sourceString;
				//	and make the thing
				generateIdenticon(sourceString);
			}
		</script>
	</body>
</html>
